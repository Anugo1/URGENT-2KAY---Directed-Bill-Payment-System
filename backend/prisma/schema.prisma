generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  phone     String?
  password  String?
  googleId  String?  @unique
  role      Role     @default(BENEFACTEE)
  bills     Bill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Wallet    Wallet?

  sponsoredBills Bill[] @relation("BillSponsors")

  requestedRequests Request[] @relation("RequestedBy")
  supportedRequests Request[] @relation("SupportedBy")
}

enum Role {
  BENEFACTOR
  BENEFACTEE
}

model Provider {
  id            String   @id @default(uuid())
  name          String   @unique
  email         String?  @unique
  accountNumber String?
  verified      Boolean  @default(false)
  bills         Bill[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Bill {
  id       String     @id @default(uuid())
  billName String
  type     String
  note     String?
  amount   Float
  priority Priority   @default(MEDIUM)
  status   BillStatus @default(PENDING)
  dueDate  DateTime?

  userId     String
  providerId String?
  requestId  String?

  user         User          @relation(fields: [userId], references: [id])
  provider     Provider?     @relation(fields: [providerId], references: [id])
  sponsors     User[]        @relation("BillSponsors")
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  request   Request? @relation(fields: [requestId], references: [id])
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum BillStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

model Transaction {
  id        String   @id @default(uuid())
  amount    Float
  status    String   @default("PENDING") // Could enum later
  billId    String
  reference String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bill Bill @relation(fields: [billId], references: [id])
}

model Wallet {
  id        String   @id @default(uuid())
  balance   Float    @default(0)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Request {
  id    String  @id @default(uuid())
  name  String
  notes String?

  status   RequestStatus @default(PENDING) // ðŸ”§ New field
  feedback String? // Optional field from supporter if rejected

  publicLinkId String @unique @default(uuid()) // ðŸ‘ˆ add this

  requesterId String
  supporterId String?

  requester User  @relation("RequestedBy", fields: [requesterId], references: [id])
  supporter User? @relation("SupportedBy", fields: [supporterId], references: [id])

  bills     Bill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String   @id @default(uuid())
  email     String
  amount    Float
  reference String   @unique
  status    String   @default("pending") // "pending", "success", "failed"
  splitCode String? // For split payment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AirtimeTransaction {
  id        String   @id @default(uuid())
  phone     String
  amount    Float
  network   String
  reference String   @unique
  createdAt DateTime @default(now())
}

model Transfer {
  id             String   @id @default(uuid())
  name           String
  accountNumber  String
  bankName       String
  bankCode       String
  recipientCode  String
  amount         Float
  reason         String
  reference      String?   
  status         String
  batchId        String?      // âœ… Must be optional
  batch          Batch?       @relation(fields: [batchId], references: [id])
  createdAt      DateTime @default(now())
}

model Batch {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  status         String
  transfers      Transfer[]
  bulkTransfers  BulkTransfer[]
}

model BulkTransfer {
  id             String   @id @default(uuid())
  amount         Int
  status         String
  reference      String
  reason         String
  recipientCode  String
  transferCode   String
  createdAt      DateTime @default(now())
  batchId        String
  batch          Batch    @relation(fields: [batchId], references: [id])
}

model Recipient {
  id             Int      @id @default(autoincrement())
  name           String
  accountNumber  String
  bankName       String
  bankCode       String
  recipientCode  String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}