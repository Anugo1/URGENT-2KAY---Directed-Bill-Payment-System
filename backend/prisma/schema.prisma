generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  phone     String?
  password  String?
  googleId  String?   @unique
  role      Role      @default(BENEFACTEE)
  bills     Bill[]
  requests  Request[] @relation("RequestedBy")
  supports  Request[] @relation("SupportedBy")
  wallet    Wallet?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  BENEFACTOR
  BENEFACTEE
}

model Provider {
  id        String   @id @default(uuid())
  name      String
  verified  Boolean  @default(false)
  bills     Bill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bill {
  id            String        @id @default(uuid())
  description   String
  amount        Float
  status        BillStatus    @default(PENDING)
  category      String?
  dueDate       DateTime?
  paymentMethod String?
  userId        String
  providerId    String?
  requestId     String?
  user          User          @relation(fields: [userId], references: [id])
  provider      Provider?     @relation(fields: [providerId], references: [id])
  request       Request?      @relation(fields: [requestId], references: [id])
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum BillStatus {
  PENDING
  APPROVED
  FAILED
  PAID
}

model Request {
  id          String   @id @default(uuid())
  notes       String?
  priority    String?
  requesterId String
  supporterId String
  bills       Bill[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requester User @relation("RequestedBy", fields: [requesterId], references: [id])
  supporter User @relation("SupportedBy", fields: [supporterId], references: [id])
}

model Wallet {
  id        String   @id @default(uuid())
  balance   Float    @default(0)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Transaction {
  id        String   @id @default(uuid())
  amount    Float
  status    String   @default("PENDING")
  billId    String
  reference String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bill Bill @relation(fields: [billId], references: [id])
}

model Payment {
  id        String   @id @default(uuid())
  email     String
  amount    Float
  reference String   @unique
  status    String   @default("pending") // "pending", "success", "failed"
  splitCode String? // For split payment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AirtimeTransaction {
  id        String   @id @default(uuid())
  phone     String
  amount    Float
  network   String
  reference String   @unique
  createdAt DateTime @default(now())
}

model Subaccount {
  id               String   @id @default(uuid())
  businessName     String
  bankCode         String
  accountNumber    String
  percentageCharge Float
  subaccountCode   String   @unique
  createdAt        DateTime @default(now())
  lastPaidAt    DateTime?  @map("last_paid_at")
  subaccountSplits SubaccountSplit[] // ðŸ‘ˆ back-relation added
}

model SubaccountSplit {
  id           String @id @default(uuid())
  subaccountId String
  splitGroupId String
  share        Float

  subaccount Subaccount @relation(fields: [subaccountId], references: [id])
  splitGroup SplitGroup @relation(fields: [splitGroupId], references: [id])
}

model SplitGroup {
  id               String            @id @default(uuid())
  name             String
  type             String // e.g., "percentage"
  currency         String // "NGN"
  splitCode        String            @unique
  bearerType       String? 
  bearerSubaccount String
  subaccounts      SubaccountSplit[]
  createdAt        DateTime          @default(now())
}

model Transfer {
  id             String   @id @default(uuid())
  name           String
  accountNumber  String
  bankName       String
  bankCode       String
  amount         Float
  reason         String
  reference      String   @unique
  status         String   @default("pending")
  recipientCode  String
  createdAt      DateTime @default(now())
}

model SplitPayment {
  id          String   @id @default(uuid())
  email       String
  amount      Float
  splitCode   String
  reference   String   @unique
  status      String   @default("pending")
  createdAt   DateTime @default(now())
}