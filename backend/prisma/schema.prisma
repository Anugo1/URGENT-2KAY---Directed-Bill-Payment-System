// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String                @id @default(cuid())
  email      String                @unique
  password   String
  name       String
  phone      String? // Added phone field as optional
  googleId   String?               @unique
  role       Role                  @default(BENEFACTEE)
  payments   Payment[]
  activities TransactionActivity[]
  bills      Bill[]
  requests   Request[]             @relation("RequestedBy")
  supports   Request[]             @relation("SupportedBy")
  wallet     Wallet?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

enum Role {
  BENEFACTOR
  BENEFACTEE
}

model Provider {
  id        String   @id @default(cuid())
  name      String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bills     Bill[] // A provider can have multiple bills
}

model Bill {
  id            String         @id @default(uuid())
  description   String
  amount        Float
  isPaid        Boolean        @default(false)
  paymentStatus String         @default("PENDING")
  metadata      Json           // To store payment references or other metadata
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum BillStatus {
  PENDING
  APPROVED
  FAILED
  PAID
}

enum BillType {
  AIRTIME
  DATA
  ELECTRICITY
  CABLE
  WATER
  EDUCATION
  OTHER
}

model Payment {
  id        String   @id @default(uuid())
  amount    Float
  status    String // 'pending', 'completed', 'failed'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model BillMetadata {
  id     String @id @default(uuid())
  billId String
  key    String
  value  String

  bill Bill @relation(fields: [billId], references: [id], onDelete: Cascade)
}

model Request {
  id            String   @id @default(cuid()) // Unique ID for the request
  billId        String   // Links the request to a specific bill
  notes       String?
  priority    String?
  benefactorId  String   // The ID of the benefactor (sponsor)
  status        String   @default("PENDING") // Status of the request (PENDING, APPROVED, REJECTED)
  createdAt     DateTime @default(now())     // Timestamp for when the request was created
  updatedAt     DateTime @updatedAt          // Timestamp for when the request was last updated

  bill          Bill     @relation(fields: [billId], references: [id]) // Relation to the Bill model
  benefactor    User     @relation(fields: [benefactorId], references: [id]) // Relation to the User model
}

model Wallet {
  id        String   @id @default(uuid())
  balance   Float    @default(0)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Transaction {
  id         String                @id @default(uuid())
  amount     Float
  status     String                @default("PENDING")
  billId     String
  reference  String                @unique
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  bill       Bill                  @relation(fields: [billId], references: [id])
  activities TransactionActivity[]
}

model TransactionActivity {
  id            String   @id @default(uuid())
  transactionId String
  userId        String
  action        String // 'initiated', 'payment_success', etc.
  description   String
  timestamp     DateTime @default(now())

  transaction Transaction @relation(fields: [transactionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}
